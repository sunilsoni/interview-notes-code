package com.interview.notes.code.year.y2025.June.amazon.test5;

import java.util.*;
import java.util.stream.*;

public class VulnerabilityFactorSolution {

    public static int gcd(int a, int b) {
        return b == 0 ? a : gcd(b, a % b);
    }

    public static boolean isPossible(List<Integer> key, int maxLen, int maxChange) {
        int n = key.size();
        int changes = 0;

        for (int i = 0; i <= n - maxLen; i++) {
            int currentGCD = key.get(i);
            for (int j = i + 1; j < i + maxLen; j++) {
                currentGCD = gcd(currentGCD, key.get(j));
                if (currentGCD == 1) break;
            }

            if (currentGCD > 1) {
                changes++;
                i += maxLen - 1; // skip this subarray as we've "modified" it
                if (changes > maxChange) return false;
            }
        }

        return true;
    }

    public static int findVulnerabilityFactor(List<Integer> key, int maxChange) {
        int left = 1, right = key.size(), result = key.size();

        while (left <= right) {
            int mid = left + (right - left) / 2;

            if (isPossible(key, mid, maxChange)) {
                result = mid;
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        }

        return result;
    }

    // Simple main method for testing
    public static void main(String[] args) {
        List<Integer> test1 = Arrays.asList(4, 2, 4);
        List<Integer> test2 = Arrays.asList(5, 10, 20, 10, 15, 5);

        System.out.println("Test 1: " + (findVulnerabilityFactor(test1, 1) == 1 ? "PASS" : "FAIL"));
        System.out.println("Test 2: " + (findVulnerabilityFactor(test2, 2) == 2 ? "PASS" : "FAIL"));

        // Large data test case
        List<Integer> largeTest = IntStream.range(0, 100000).map(i -> 2).boxed().collect(Collectors.toList());
        System.out.println("Large Test: " + (findVulnerabilityFactor(largeTest, 50000) <= 2 ? "PASS" : "FAIL"));
    }
}
