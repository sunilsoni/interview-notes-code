package com.interview.notes.code.year.y2025.June.amazon.test4;

import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

public class VulnerabilityFactor {

    public static int findVulnerabilityFactor(List<Integer> key, int maxChange) {
        int n = key.size();
        int left = 1;  // minimum possible vulnerability
        int right = n;  // maximum possible vulnerability

        // Binary search for the minimum vulnerability factor
        while (left < right) {
            int mid = left + (right - left) / 2;
            if (canAchieveVulnerability(key, maxChange, mid)) {
                right = mid;
            } else {
                left = mid + 1;
            }
        }
        return left;
    }

    private static boolean canAchieveVulnerability(List<Integer> key, int maxChange, int target) {
        int n = key.size();

        // Try each possible starting position
        for (int start = 0; start + target <= n; start++) {
            int changes = 0;
            boolean possible = true;

            // Check each window of size 'target'
            for (int i = 0; i < n - target + 1; i++) {
                List<Integer> window = key.subList(i, i + target);
                int changesNeeded = getMinChangesForWindow(window);
                if (changesNeeded == -1) {
                    possible = false;
                    break;
                }
                changes += changesNeeded;
            }

            if (possible && changes <= maxChange) {
                return true;
            }
        }
        return false;
    }

    private static int getMinChangesForWindow(List<Integer> window) {
        // Calculate minimum changes needed to make GCD=1 for the window
        int gcd = window.get(0);
        for (int i = 1; i < window.size(); i++) {
            gcd = gcd(gcd, window.get(i));
        }

        if (gcd == 1) return 0;
        return 1; // We can always make GCD=1 by changing one number to a prime
    }

    private static int gcd(int a, int b) {
        while (b != 0) {
            int temp = b;
            b = a % b;
            a = temp;
        }
        return a;
    }

    public static void main(String[] args) {
        // Test Case 1
        runTest(
                Arrays.asList(4, 2, 4),
                1,
                1,
                "Basic Test Case 1"
        );

        // Test Case 2
        runTest(
                Arrays.asList(5, 10, 20, 10, 15, 5),
                2,
                2,
                "Basic Test Case 2"
        );

        // Edge Case - Single Element
        runTest(
                Arrays.asList(7),
                0,
                1,
                "Single Element"
        );

        // Large Numbers Test
        runTest(
                IntStream.range(0, 100)
                        .map(i -> 1000000000)
                        .boxed()
                        .collect(Collectors.toList()),
                5,
                2,
                "Large Numbers"
        );

        // All Prime Numbers
        runTest(
                Arrays.asList(2, 3, 5, 7, 11, 13),
                0,
                1,
                "All Primes"
        );
    }

    private static void runTest(List<Integer> key,
                                int maxChange,
                                int expectedResult,
                                String testName) {
        int result = findVulnerabilityFactor(key, maxChange);
        System.out.printf("Test: %s - %s%n",
                testName,
                result == expectedResult ? "PASS" : "FAIL");
        if (result != expectedResult) {
            System.out.printf("Expected: %d, Got: %d%n", expectedResult, result);
        }
    }
}
