package com.interview.notes.code.year.y2025.June.amazon.test5;

import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

public class VulnerabilityFactor {

    public static int gcd(int a, int b) {
        while (b != 0) {
            int temp = b;
            b = a % b;
            a = temp;
        }
        return a;
    }

    public static boolean isValid(List<Integer> key, int maxLen, int maxChange) {
        int changesNeeded = 0;
        int n = key.size();

        for (int i = 0; i <= n - maxLen; i++) {
            int subGcd = key.get(i);
            for (int j = i + 1; j < i + maxLen; j++) {
                subGcd = gcd(subGcd, key.get(j));
                if (subGcd == 1) break;
            }
            if (subGcd > 1) {
                changesNeeded++;
                if (changesNeeded > maxChange) return false;
                i += maxLen - 1;
            }
        }
        return true;
    }

    public static int findVulnerabilityFactor(List<Integer> key, int maxChange) {
        int low = 1, high = key.size(), result = key.size();

        while (low <= high) {
            int mid = low + (high - low) / 2;
            if (isValid(key, mid, maxChange)) {
                result = mid;
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }

        return result;
    }

    // Simple main method to test functionality
    public static void main(String[] args) {
        List<TestCase> testCases = Arrays.asList(
                new TestCase(Arrays.asList(4, 2, 4), 1, 1),
                new TestCase(Arrays.asList(5, 10, 20, 10, 15, 5), 2, 2),
                new TestCase(Arrays.asList(3, 3, 3, 3, 3, 3, 3), 3, 1),
                new TestCase(IntStream.range(0, 100000).map(i -> i % 2 == 0 ? 4 : 9).boxed().collect(Collectors.toList()), 10, 1)
        );

        for (int i = 0; i < testCases.size(); i++) {
            TestCase tc = testCases.get(i);
            int result = findVulnerabilityFactor(tc.key, tc.maxChange);
            if (result == tc.expected) {
                System.out.println("Test case " + (i + 1) + " PASSED");
            } else {
                System.out.println("Test case " + (i + 1) + " FAILED (Expected: " + tc.expected + ", Got: " + result + ")");
            }
        }
    }

    static class TestCase {
        List<Integer> key;
        int maxChange;
        int expected;

        TestCase(List<Integer> key, int maxChange, int expected) {
            this.key = key;
            this.maxChange = maxChange;
            this.expected = expected;
        }
    }
}
