package com.interview.notes.code.months.jan24.test9;

import java.util.Arrays;
import java.util.List;

public class EqualTeamSkill {
    public static int equalTeamSkill(List<Integer> teamA, List<Integer> teamB) {
        long sumA = teamA.stream().mapToLong(Integer::intValue).sum();
        long sumB = teamB.stream().mapToLong(Integer::intValue).sum();
        long zerosA = teamA.stream().filter(i -> i == 0).count();
        long zerosB = teamB.stream().filter(i -> i == 0).count();

        if (sumA == sumB) return (int) sumA; // Already equal, no need to add players

        // If team A has higher sum, we need to add players to team B, and vice versa
        boolean addPlayersToA = sumA < sumB;
        long diff = Math.abs(sumA - sumB);

        // Calculate the number of players to add to the smaller team to make the sums equal
        long playersToAdd = addPlayersToA ? zerosA : zerosB;
        if (playersToAdd * 1 < diff) {
            // Not enough zeros to balance the teams by adding minimum skill level (1)
            return -1;
        }

        // Return the new equal sum of both teams after adding players
        return (int) (Math.max(sumA, sumB) + diff);
    }


    /**
     * A sports coach must ensure that two teams in a competition are equally strong. Teams A and B have n and m players. The players' skill levels are stored in arrays TeamA and TeamB. A 0 value indicates that the team lacks a player in that position. The coach wants to add players in each empty position such that the teams' skill levels have equal sums. Return the minimum possible equal sum or -1 if it is not possible to obtain such a sum.
     * Example
     * teamA = [5, 10, 0, 4]
     * teamB = [2, 4, 0, 5, 0]
     * Add a player of skill level 1 in teamA, and players of skill levels 3 and 6 in teamB. Now teamA = [5, 10, 1,
     * 4], and teamB = [2, 4, 3, 5, 6], with sums 5+10+1+4 = 2+4+3+5+6 = 20
     * Function Description
     * Complete the function equalTeamSkill in the editor below.
     * equalTeamSkill has the following parameters: int teamA[n]: skill levels of players int teamB[m]: skill levels of players
     * Returns
     * to obtain an equal sum
     * int: an integer, which, if positive, denotes the minimum equal sum, and if -1 indicates that it is not possible
     * Constraints
     * • 1≤n, m≤ 103
     * • 0 ≤ teamA[il, teamB[i] ≤ 104
     *
     *
     *
     * Sample Input For Custom Testing
     * STDIN
     * 4
     * 1
     * 2
     * 3
     * →
     * FUNCTION
     * teamA[] size n = 4
     * teamA = [1, 2, 3, 0]
     * 3
     * 5
     * →
     * →
     * teamB[] size n = 3
     * teamB = [5, 0, 0]
     * Sample Output
     * 7
     * Explanation
     * The final teams are teamA = [1, 2, 3, 1], and teamB = [5, 1, 1].
     * • Sample Case 1
     * Sample Input For Custom Testing
     * STDIN
     * ーーーーー
     * 3
     * 1
     * 2
     * 3
     * 2
     * FUNCTION
     * →
     * →
     * teamA[] size n = 3
     * teamA = [1, 2, 3]
     * teamB[] size n = 2
     * teamB = [0, 10]
     * 10
     * Sample Output
     * -1
     * Explanation
     * There is no way to replace the zero in teamB such that the sums are equal.
     * @param args
     */
    public static void main(String[] args) {
        // Example 1
        List<Integer> teamA1 = Arrays.asList(1, 2, 3, 0);
        List<Integer> teamB1 = Arrays.asList(5, 0, 0);
        System.out.println("Example 1 Result: " + equalTeamSkill(teamA1, teamB1));

        // Example 2
        List<Integer> teamA2 = Arrays.asList(1, 2, 3);
        List<Integer> teamB2 = Arrays.asList(0, 10);
        System.out.println("Example 2 Result: " + equalTeamSkill(teamA2, teamB2));

        // Example 2
        List<Integer> teamA3 = Arrays.asList(1158, 0, 0, 201, 2, 8462, 0, 0, 4305, 0, 6671, 0, 2188, 7887, 0, 0, 0, 8078, 0, 1961, 0, 9588, 0, 7732, 5896, 8320, 7969, 4372, 0, 0, 0, 9946, 0, 0, 0, 0, 9434, 0, 0, 1561, 4224, 0, 0, 0, 0, 3734, 9704, 5701, 6962, 0, 0, 0, 851, 9032, 5528, 0, 4688, 813, 0, 4400, 0, 4296, 2193, 4102, 5766, 0, 3573, 3538, 6608, 6128, 3782, 6294, 9604, 4459, 7259, 0, 7878, 0, 8242, 0, 0, 0, 1366, 0, 8934, 8070, 4084, 2486, 1547, 0, 4197, 0, 1700, 2863, 595, 4472, 3563, 0, 6226, 0, 5675, 0, 7240, 7597, 8140, 0, 6455, 6871, 0, 46, 0, 3936, 0, 978, 0, 0, 6947, 0, 0, 0, 9226, 5726, 6854, 2496, 4789, 7044, 186, 3934, 6314, 0, 2968, 0, 3914, 3743, 3909, 1452, 8927, 618, 4708, 239, 0, 9029, 0, 0, 8866, 2720, 0, 0, 1889, 0, 4138, 9999, 8164, 7451, 4309, 7236, 5093, 0, 5036, 9033, 0, 5337, 6597, 0, 4474, 9824, 4914, 3900, 4404, 7863, 0, 6092, 0, 6909, 8065, 4037, 5217, 5896, 0, 2659, 3738, 9038, 0, 4080, 0, 8797, 2203, 4698, 0, 8779, 7350, 8893, 6502, 0, 9179, 454, 0, 1825, 5787, 0, 0, 9284, 4448, 738, 0, 8986, 4689, 0, 6794, 2549, 0, 0, 0, 6145, 4297, 2609, 0, 0, 377, 7458, 0, 2768, 8566, 1686, 0, 0, 0, 4884, 965, 9838, 0, 1692, 455, 1919, 6410, 1339, 8227, 8744, 3961, 6374, 0, 0, 0, 0, 0, 3675, 0, 7174, 0, 7864, 5675, 0, 3981, 934, 1407, 0, 2114, 0, 9318, 0, 4942, 1262, 4656, 0, 5856, 365, 3313, 5561, 9945, 0, 6932, 8710, 0, 6763, 1797, 0, 8151, 5767, 1782, 9464, 4482, 2635, 0, 2259, 9637, 8048, 6311, 0, 0, 7018, 3937, 9199, 4456, 9133, 4492, 6405, 0, 8839, 0, 0, 3882, 3898, 0, 0, 5523, 7155, 0, 273, 9736, 6428, 1514, 0, 0, 0, 2825, 1876, 2079, 3672, 4081, 7665, 3594, 8985, 0, 4670, 0, 7477, 1420, 0, 0, 5119, 5104, 6911, 0, 0, 0, 3773, 6518, 6750, 6447, 1560, 0, 3487, 4573, 3994, 4329, 0, 0, 2636, 1936, 0, 9409, 3571, 355, 8016, 6740, 6992, 0, 2987, 7585, 0, 5057, 0, 7613, 1487, 0, 9568, 2986, 0, 0, 6274, 7044, 0, 0, 328, 3481, 9057, 0, 400, 8909, 3828, 0, 7927, 359, 7490, 0, 7660, 60, 40, 7323, 3606, 286, 0, 0, 1466, 6679, 5778, 7963, 7037, 4688, 1450, 5690, 8120, 3462, 0, 0, 9624, 925, 0, 7058, 6456, 4800, 3252, 899, 0, 0, 3772, 0, 0, 2911, 0, 0, 8857, 0, 7470, 0, 6815, 3453, 0, 3218, 8, 5158, 2428, 0, 7761, 5792, 5882, 1349, 0, 1237, 8010, 0, 2097, 0, 6963, 0, 7726, 0, 8508, 6406, 0, 0, 965, 3268, 1410, 2101, 6469, 8147, 2539, 7290, 4124, 7312, 8662, 5185, 4728, 0, 0, 0, 7838, 2493, 4786, 1519, 4115, 2054, 572, 4789, 311, 0, 0, 3347, 2270, 5104, 8242, 0, 0, 0, 0, 8953, 3092, 412, 1641, 8509, 0, 8717, 4256, 8961, 0, 0, 701, 0, 6256, 1804, 4035, 7901, 1877, 0, 0, 0, 4980, 0, 7424, 0, 0, 8991, 9629, 8944, 9898, 0, 0, 0, 9177, 5016, 0, 0, 1933, 554, 3078, 6052, 3150, 0, 2758, 0, 1851, 0, 60, 0, 8308, 3088, 4209, 5653, 0, 3721, 1067, 5005, 3850, 9259, 3556, 8221, 7292, 0, 7992, 0, 0, 0, 0, 0, 5979, 0, 255, 0, 0, 4112, 4762, 7502, 836, 799, 5338, 0, 5105, 733, 0, 4440, 0, 9191, 1124, 0, 2609, 652, 3109, 5263, 4591, 9803, 4347, 0, 8733, 3166, 6983, 6960, 3746, 9102, 9063, 3771, 4064, 1468, 8559, 4149, 1539, 4569, 0, 9467, 9727, 0, 0, 0, 0, 8285, 0, 6466, 7302, 0, 5491, 6251, 9816, 1788, 813, 1045, 0, 0, 1026, 1892, 3653, 3420, 2042, 8575, 0, 0, 515, 8232, 4250, 9158, 8240, 1221, 0, 0, 29, 7514, 2982, 5869, 1449, 0, 9511, 2846, 9859, 0, 8675, 9461, 0, 0, 9701, 4964, 0, 4620, 7607, 0, 7455, 2673, 2094, 6171, 0, 22, 0, 3938, 5025, 6658, 0, 7619, 7302, 0, 7839, 4191, 1046, 0, 0, 1701, 2758, 5622, 0, 163, 2824, 0, 5559, 9353, 0, 0, 5138, 4122, 9657, 7563, 5702, 4495, 525, 2859, 7686, 3347, 1013, 3894, 4424, 529, 2104, 7842, 0, 0, 0, 0, 4416, 6383, 1732, 0, 0, 9920, 2971, 0, 7521, 8953, 5834, 0, 0, 0, 2641, 4370, 9979, 2775, 0, 7809, 5519, 0, 0, 3933, 6216, 0, 0, 4425, 7619, 0, 6733, 2532, 681, 0, 0, 0, 2866, 678, 4632, 6370, 0, 0, 0, 9590, 9816, 4127, 6371, 0, 0, 80, 0, 0, 0, 3521, 4575, 6730, 0, 8711, 4884, 4645, 4122, 3029, 0, 5407, 8634, 3937, 5561, 2391, 9726, 0, 3120, 0, 0, 535, 794, 8104, 9492, 0, 0, 9818, 2269, 2083, 4099, 0, 7332, 3812, 696, 225, 7934, 557, 1682, 0, 7020, 7173, 0, 460, 0, 1428, 0, 7505, 9205, 0, 2891, 6436, 2819, 6062, 5545, 2445, 0, 6009, 0, 6823, 7815, 1638, 644, 746, 8157, 0, 0, 9850, 7189, 8404, 1109, 7004, 1831, 5515, 2024, 0, 0, 7479, 9609, 206, 0, 0, 5458, 0, 3314, 8050, 0, 6687, 1489, 0, 3706, 9856, 0, 3362, 5983, 0, 9197, 0, 9614, 5678, 7107, 0, 9989, 8640, 3936, 1428, 6292, 5610, 3065, 0, 9989, 3679, 1659, 5936, 5198, 845, 2888, 0, 0, 7549, 0, 5757, 7624, 3629, 0, 5226, 1874, 6963, 0, 5691, 3386, 6329, 7726, 2791, 9417, 0, 2356, 0, 3993, 1363, 0, 5989, 0, 0, 8127, 9282, 8801, 0, 6319, 0, 3086, 8732, 5794, 0, 8205, 4379, 0, 2314, 0, 0, 5199, 0, 0);
        List<Integer> teamB3 = Arrays.asList(4141, 5725, 0, 0, 7319, 4851, 7188, 1973, 0, 8629, 5468, 7617, 4358, 3492, 0, 2568, 0, 6699, 4336, 1704, 4691, 0, 7336, 1501, 8254, 56, 9831, 4227, 130, 8670, 1639, 0, 5639, 250, 9067, 4351, 8195, 0, 0, 3261, 0, 3904, 0, 6399, 1042, 0, 717, 2263, 2810, 7287, 0, 0, 6925, 0, 6392, 4888, 407, 0, 3035, 4743, 6073, 6542, 8359, 0, 2369, 9848, 0, 4301, 977, 8383, 1951, 8747, 9381, 5243, 0, 0, 0, 8797, 9481, 2538, 5473, 0, 9271, 0, 0, 0, 0, 2520, 0, 214, 4957, 7780, 0, 0, 9206, 152, 86, 2263, 1691, 3358, 7616, 2677, 8633, 3995, 6629, 4771, 5900, 8725, 8989, 0, 9829, 1492, 9117, 157, 5302, 0, 0, 1695, 8676, 6859, 2262, 0, 55, 0, 0, 843, 7554, 1018, 9906, 6356, 0, 6009, 6033, 0, 0, 2470, 5495, 0, 5733, 3469, 8711, 1241, 0, 7964, 6595, 7263, 0, 0, 0, 4611, 4221, 4601, 9016, 0, 2836, 6880, 7797, 7336, 0, 9772, 1449, 2723, 3313, 7440, 4867, 4011, 0, 9403, 500, 0, 4162, 379, 9594, 0, 9367, 7464, 3773, 7955, 2580, 1261, 8889, 3362, 5398, 0, 8643, 783, 5631, 5519, 0, 0, 8830, 7427, 6919, 3065, 8068, 3804, 7409, 6483, 1164, 4783, 8738, 677, 0, 0, 2463, 5053, 0, 2967, 0, 6833, 1210, 0, 7013, 1160, 9323, 0, 4380, 5318, 8703, 0, 8677, 3789, 2784, 1315, 0, 4193, 5455, 176, 0, 6297, 5041, 8876, 0, 3778, 0, 4388, 2693, 2467, 0, 9006, 0, 0, 0, 2864, 0, 5808, 778, 0, 1575, 4596, 4661, 0, 292, 3387, 0, 0, 0, 0, 8960, 8174, 0, 4833, 0, 1299, 2104, 0, 0, 3637, 0, 7194, 2569, 1229, 6367, 7112, 0, 3471, 0, 5388, 3094, 270, 0, 4326, 0, 8606, 9959, 0, 4969, 0, 4690, 0, 0, 7698, 6882, 2316, 0, 4969, 0, 0, 5380, 0, 7653, 0, 9769, 0, 6870, 2505, 9129, 1508, 0, 2516, 1601, 6272, 8461, 9412, 1075, 2329, 0, 1029, 4091, 8273, 0, 0, 7067, 5275, 5309, 8052, 4789, 7608, 7992, 0, 6901, 0, 0, 0, 0, 0, 0, 464, 4276, 1959, 7614, 2364, 784, 0, 9014, 4977, 0, 0, 3619, 1482, 172, 5511, 2828, 0, 0, 5381, 0, 1013, 5872, 0, 4740, 7095, 6210, 0, 0, 0, 2560, 0, 0, 2812, 7563, 6200, 0, 0, 0, 2516, 6034, 0, 6031, 0, 5013, 0, 0, 3218, 3870, 0, 0, 2301, 8673, 0, 0, 2342, 1642, 1018, 4505, 185, 0, 0, 4968, 702, 0, 0, 0, 0, 6873, 9891, 0, 0, 0, 990, 3602, 0, 0, 2031, 0, 0, 2346, 3338, 7818, 5397, 320, 0, 0, 9151, 7576, 8487, 2323, 7809, 540, 2095, 8178, 5273, 8884, 0, 4714, 1472, 1726, 557, 1393, 6742, 0, 3153, 0, 0, 7217, 0, 0, 0, 435, 0, 8855, 27, 0, 4836, 0, 0, 4014, 0, 2687, 1992, 204, 7680, 9680, 7682, 531, 2906, 4278, 8392, 0, 0, 8897, 6605, 6906, 0, 7563, 98, 3141, 0, 1486, 1355, 5304, 0, 0, 6918, 8658, 3726, 0, 1512, 0, 2625, 8174, 6382, 2356, 3194, 1663, 8168, 0, 6001, 0, 3419, 0, 4900, 3530, 8636, 21, 4558, 0, 0, 5172, 4463, 397, 889, 494, 0, 0, 3206, 9076, 0, 68, 4293, 5615, 1752, 7735, 0, 5810, 234, 0, 8363, 9527, 0, 4297, 7523, 2335, 5395, 0, 7048, 3961, 2060, 2149, 0, 9455, 0, 473, 3913, 0, 0, 865, 0, 4168, 0, 258, 2943, 3711, 0, 6250, 4276, 4744, 0, 0, 1117, 5940, 0, 0, 9471, 3042, 0, 0, 0, 0, 4126, 7825, 9597, 0, 3760, 0, 218, 8811, 0, 9673, 950, 608, 2657, 8243, 3357, 7005, 1274, 0, 903, 6897, 5541, 7223, 6787, 6598, 3534, 290, 1688, 7961, 4258, 0, 1019, 2567, 0, 7439, 0, 0, 1554, 3861, 6888, 8929, 0, 495, 5646, 4701, 2352, 95, 7367, 5603, 4379, 2618, 3796, 2977, 1394, 3732, 2367, 0, 4378, 6559, 1509, 0, 0, 9651, 0, 5794, 5962, 0, 8776, 8098, 6913, 2416, 0, 5327, 2630, 0, 0, 0, 7134, 0, 9172, 0, 477, 7884, 0, 316, 6948, 4504, 7559, 0, 5553, 6925, 0, 0, 7046, 2581, 7420, 7957, 3381, 4565, 7808, 0, 487, 2823, 3320, 1853, 4975, 7069, 5559, 2062, 5128, 0, 0, 9992, 0, 6825, 1006, 8204, 6229, 1375, 0, 2155, 0, 0, 34, 2663, 1108, 1716, 3132, 0, 6809, 0, 0, 9102, 4102, 0, 4143, 8223, 7675, 0, 5521, 488, 0, 0, 9840, 0, 5658, 0, 8253, 3502, 9505, 8149, 3371, 0, 3921, 7684, 5354, 0, 0, 0, 8231, 1892, 5781, 2875, 8969, 0, 1293, 9647, 6860, 7509, 0, 5017, 0, 0, 7962, 8683, 1862, 7279, 4661, 7480, 9645, 0, 7631, 9639, 6073, 5985, 0, 8319, 9923, 0, 0, 0, 1123, 4187, 0, 4403, 7451, 2444, 0, 6376, 8052, 4056, 1243, 7671, 9319, 7068, 0, 6271, 9699, 1983, 0, 1798, 0, 8304, 0, 0, 1318, 3536, 9144, 3417, 9072, 0, 6356, 0, 4504, 8403, 2014, 2137, 6175, 350, 8255, 0, 1247, 0, 2731, 0, 6858, 1652, 2506);
        System.out.println("Example 3 Result: " + equalTeamSkill(teamA3, teamB3));
    }
}
